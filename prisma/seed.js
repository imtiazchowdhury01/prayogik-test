import { PrismaClient, SubscriptionType } from "@prisma/client";
const db = new PrismaClient();

const categoryData = [
  // 1. Digital Marketing (Parent)
  {
    name: "‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç",
    slug: "digital-marketing",
    isChild: false,
    childCategories: [
      { name: "‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶® ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® (SEO)", slug: "seo", isChild: true },
      {
        name: "‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç (SMM)",
        slug: "social-media-marketing",
        isChild: true,
      },
      { name: "‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç", slug: "content-marketing", isChild: true },
      { name: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç", slug: "email-marketing", isChild: true },
      { name: "‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ü‡ßá‡¶ú‡¶ø", slug: "content-strategy", isChild: true },
      {
        name: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶´‡¶ø‡¶≤‡¶ø‡¶Ø‡¶º‡ßá‡¶ü ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç",
        slug: "affiliate-marketing",
        isChild: true,
      },
    ],
  },

  // 2. Web Development (Parent)
  {
    name: "‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
    slug: "web-development",
    isChild: false,
    childCategories: [
      {
        name: "‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü-‡¶è‡¶®‡ßç‡¶° ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
        slug: "frontend-development",
        isChild: true,
      },
      {
        name: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï-‡¶è‡¶®‡ßç‡¶° ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
        slug: "backend-development",
        isChild: true,
      },
      {
        name: "‡¶´‡ßÅ‡¶≤-‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
        slug: "fullstack-development",
        isChild: true,
      },
      {
        name: "‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
        slug: "wordpress-development",
        isChild: true,
      },
      {
        name: "‡¶ì‡ßü‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶ì ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
        slug: "web-design-development",
        isChild: true,
      },
    ],
  },

  // 3. Design (Parent)
  {
    name: "‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®",
    slug: "design",
    isChild: false,
    childCategories: [
      { name: "‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®", slug: "graphics-design", isChild: true },
      { name: "UI/UX ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®", slug: "uiux-design", isChild: true },
      { name: "‡¶≤‡ßã‡¶ó‡ßã ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®", slug: "logo-design", isChild: true },
      { name: "‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®", slug: "web-design", isChild: true },
      {
        name: "‡¶Æ‡ßã‡¶∂‡¶® ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®",
        slug: "motion-graphics-design",
        isChild: true,
      },
      { name: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®", slug: "animation", isChild: true },
      { name: "‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶°‡¶ø‡¶ü‡¶ø‡¶Ç", slug: "video-editing", isChild: true },
    ],
  },

  // 4. Standalone Categories (No parent)
  {
    name: "‡¶è‡¶®‡ßç‡¶°‡ßç‡¶∞‡ßã‡¶á‡¶° ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
    slug: "android-development",
    isChild: false,
  },
  {
    name: "‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ",
    slug: "social-media",
    isChild: false,
  },
  {
    name: "‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏",
    slug: "business",
    isChild: false,
  },
  {
    name: "‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶ï‡ßç‡¶∏",
    slug: "data-analytics",
    isChild: false,
  },
];

export async function seedCategory() {
  console.log("Seeding categories...");

  try {
    // First create parent categories
    for (const category of categoryData) {
      if (!category.childCategories) {
        // Handle standalone categories
        await db.category.upsert({
          where: { slug: category.slug },
          update: { name: category.name, isChild: category.isChild },
          create: category,
        });
        console.log(`Upserted standalone category: ${category.slug}`);
        continue;
      }

      // Handle parent categories with children
      const { childCategories, ...parentData } = category;

      const parent = await db.category.upsert({
        where: { slug: parentData.slug },
        update: { name: parentData.name, isChild: parentData.isChild },
        create: parentData,
      });

      console.log(`Upserted parent category: ${parentData.slug}`);

      // Create child categories
      for (const child of childCategories) {
        await db.category.upsert({
          where: { slug: child.slug },
          update: {
            ...child,
            parentCategory: { connect: { id: parent.id } },
          },
          create: {
            ...child,
            parentCategory: { connect: { id: parent.id } },
          },
        });
        console.log(
          `Upserted child category: ${child.slug} under ${parentData.slug}`
        );
      }
    }

    console.log("‚úî Categories seeded successfully!");
  } catch (error) {
    console.error("Error seeding categories:", error);
    throw error;
  } finally {
    await db.$disconnect();
  }
}

// ------------------ Seed Rank ------------------
const rankData = [
  {
    name: "Three Star",
    description:
      "Three star ranked teacher will get 25% share of revenue from course sell",
    numberOfSales: 1,
    feePercentage: 25,
  },
  {
    name: "Five Star",
    description:
      "Five star ranked teacher will get 30% share of revenue from course sell",
    numberOfSales: 5,
    feePercentage: 30,
  },
  {
    name: "Seven Star",
    description:
      "Seven star ranked teacher will get 40% share of revenue from course sell",
    numberOfSales: 10,
    feePercentage: 40,
  },
];

export async function seedRank() {
  console.log("Seeding ranks...");

  try {
    // Loop through the data and upsert each rank
    for (const rank of rankData) {
      await db.teacherRank.upsert({
        where: { name: rank.name }, // Use `name` as the unique identifier
        update: { ...rank }, // Update with the new data if it exists
        create: { ...rank }, // Create with the new data if it doesn't exist
      });
    }

    console.log("‚úî Ranks seeded successfully!üî•");
  } catch (error) {
    console.error("Error seeding the database ranks", error);
    throw error; // Re-throw the error to handle it in the seed.ts file
  } finally {
    await db.$disconnect();
  }
}

// ------------------ Seed Discount ------------------
const discountData = [
  {
    name: "Default",
    discountPercentage: 70,
    isDefault: true,
  },
  {
    name: "Trial Discount",
    discountPercentage: 0,
    isDefault: false,
  },
];

export async function seedDiscount() {
  console.log("Seeding membership course price discount...");

  try {
    // Loop through the data and upsert each discount
    for (const discount of discountData) {
      await db.subscriptionDiscount.upsert({
        where: { name: discount.name }, // Use `name` as the unique identifier
        update: { ...discount }, // Update with the new data if it exists
        create: { ...discount }, // Create with the new data if it doesn't exist
      });

      console.log(`Upserted discount with name: ${discount.name}`);
    }

    console.log("‚úî Membership course price discount seeded successfully!üî•");
  } catch (error) {
    console.error("Error seeding membership course price discount", error);
    throw error; // Re-throw the error to handle it in the seed.ts file
  } finally {
    await db.$disconnect();
  }
}

const subscriptionPlanData = [
  {
    name: "Trial",
    type: SubscriptionType.NONE,
    regularPrice: 0,
    offerPrice: 0,
    durationInMonths: 1,
    durationInYears: 1,
    isTrial: true,
    trialDurationInDays: 30,
    isDefault: false,
  },
  {
    name: "1 Year Plan",
    type: SubscriptionType.YEARLY,
    regularPrice: 10000,
    offerPrice: 8000,
    durationInMonths: 1,
    durationInYears: 1,
    isTrial: false,
    trialDurationInDays: 30,
    isDefault: true,
  },
  {
    name: "2 Year Plan",
    type: SubscriptionType.YEARLY,
    regularPrice: 15000,
    offerPrice: 12000, // Example offer price
    durationInMonths: 1,
    durationInYears: 2,
    isTrial: false,
    trialDurationInDays: 30,
    isDefault: false,
  },

  {
    name: "3 Year Plan",
    type: SubscriptionType.YEARLY,
    regularPrice: 20000,
    offerPrice: 15000,
    durationInMonths: 1,
    durationInYears: 3,
    isTrial: false,
    trialDurationInDays: 30,
    isDefault: false,
  },
];

export async function seedSubscriptionPlan() {
  console.log("Seeding subscription plans...");
  try {
    // Find the default discount first
    const defaultDiscount = await db.subscriptionDiscount.findFirst({
      where: { isDefault: true },
    });

    const trialDiscount = await db.subscriptionDiscount.findFirst({
      where: {
        discountPercentage: 0,
      },
    });
    console.log({ trialDiscount });

    if (!defaultDiscount) {
      console.log("‚ö† No default discount found");
      return;
    }

    // Process each subscription plan from the data array
    for (const planData of subscriptionPlanData) {
      try {
        // Check if plan already exists by name
        const existingPlan = await db.subscriptionPlan.findFirst({
          where: { name: planData.name },
        });

        let createdOrUpdatedPlan;

        if (existingPlan) {
          // Update existing plan
          createdOrUpdatedPlan = await db.subscriptionPlan.update({
            where: { id: existingPlan.id },
            data: {
              type: planData.type,
              regularPrice: planData.regularPrice,
              offerPrice: planData.offerPrice,
              durationInMonths: planData.durationInMonths,
              durationInYears: planData.durationInYears,
              isTrial: planData.isTrial,
              trialDurationInDays: planData.trialDurationInDays,
              isDefault: planData.isDefault,
              subscriptionDiscountId:
                planData.type === "NONE"
                  ? trialDiscount?.id
                  : defaultDiscount.id,
            },
          });
          console.log(`‚úî Updated subscription plan: ${planData.name}`);
        } else {
          // Create new plan (exclude the hardcoded subscriptionDiscountId from planData)
          const { subscriptionDiscountId, ...planDataWithoutDiscountId } =
            planData;

          createdOrUpdatedPlan = await db.subscriptionPlan.create({
            data: {
              ...planDataWithoutDiscountId,
              subscriptionDiscountId:
                planData.type === "NONE"
                  ? trialDiscount?.id
                  : defaultDiscount.id,
            },
          });
          console.log(`‚úî Created subscription plan: ${planData.name}`);
        }
      } catch (planError) {
        console.error(`Error processing plan ${planData.name}:`, planError);
        // Continue with other plans instead of stopping
        continue;
      }
    }

    console.log("‚úî Subscription plans seeded successfully!üî•");
  } catch (error) {
    console.error("Error seeding the database subscription plans", error);
    throw error;
  } finally {
    await db.$disconnect();
  }
}

// Seed All
async function seedAll() {
  try {
    console.log("Starting seeding process...");
    // await seedUsers();
    await seedCategory();
    await seedRank();
    await seedDiscount();
    await seedSubscriptionPlan();

    console.log("‚úî All seeding completed successfully!üî•");
  } catch (error) {
    console.error("Error during seeding:", error);
  }
}

// Run the seed function
seedAll();
